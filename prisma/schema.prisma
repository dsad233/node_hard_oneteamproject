// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    Int      @id @default(autoincrement()) @map("userId")
  email     String   @unique @map("email") 
  name String @map("name")
  password  String   @map("password")
  emailstatus emailStatus? @default(waiting) @map("emailstatus")
  emailVerified Boolean  @default(false) @map("emailVerified")
  verificationToken String? @map("verificationToken") 
  userpoint Int @default(0)
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  orders Orders []
  reviews  Reviews []
  userspointh Userspointh []
  @@map("Users")
}

enum emailStatus{
  waiting
  completion
}

model Aduser{
storeId Int  @id @default(autoincrement()) @map("storeId")
aduserId Int @unique @map("aduserId")
adminName String @map("adminName")
adEmail String @map("adEmail")
adPassword  String   @map("adPassword")
adEmailstatus AdEmailstatus @default(waiting) @map("adEmailstatus")
adEmailVerified Boolean  @default(false) @map("adEmailVerified")
adVerificationToken String? @map("adVerificationToken") 
createdAt DateTime @default(now()) @map("createdAt")
updatedAt DateTime @updatedAt @map("updatedAt")
stores Stores?
}

enum AdEmailstatus{
  waiting
  completion
}

model Stores{
  storeId Int  @id @default(autoincrement()) @map("storeId")
  aduserId Int @unique @map("aduserId")
  storeName     String?   @unique @map("storename") 
  storeAddress String? @map("storeaddress")
  storeContact String? @map("storecontact")
  storePoint Int @default(0)
  storeContent           String?           @map("storecontent")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt") 
  aduser Aduser @relation(fields: [aduserId], references: [aduserId], onDelete: Cascade)
  menus Menus []
  orders Orders []
  reviews  Reviews []
  storespointh Storespointh []
  @@map("Stores")
}

model Menus {
  menuId    Int      @id @default(autoincrement()) @map("menuId")
  storeId Int @map("storeId")
  menuName     String   @map("menuname")
  menuPrice   Int   @map("menuprice")
  menuContent String @map("menucontent") @db.Text
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  store Stores @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
  orders Orders []
  reviews Reviews [] 
  @@map("Menus")
}

model Orders {
  orderId Int  @id @default(autoincrement()) @map("orderId")
  userId Int @map("userId")
  storeId    Int     @map("storeId")
  menuId Int @map("menuId")
  orderContent String @map("ordercontent") @db.Text
  orderStatus Orderstatus @default(cooking) @map("orderstatus")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  ea Int @map("ea")
  totalPrice Int @map("totalPrice")
  orderAddress String @map("orderAddress")
  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  store Stores @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
  menu Menus @relation(fields: [menuId], references: [menuId], onDelete: Cascade)
  reviews Reviews []
  userspointh Userspointh []
  storespointh Storespointh []
  @@map("Orders")
}

enum Orderstatus {
  cooking
  deliveryready
  delivering
  deliverycompleted
}

model Reviews {
  reviewId   Int      @id @default(autoincrement()) @map("likesId")
  userId    Int @map("userId")
  storeId    Int @map("storeId")
  menuId    Int @map("menuId")
  orderId Int @map("orderId")
  review String @map("review") @db.Text
  rate Int @map("rate")
  createdAt    DateTime @default(now()) @map("createdAt")
  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  store Stores @relation(fields: [storeId], references: [storeId] , onDelete: Cascade)
  menu Menus @relation(fields: [menuId], references: [menuId], onDelete: Cascade)
  order Orders @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  @@map("Reviews")
}

model Userspointh{
  userpointhId Int  @id @default(autoincrement()) @map("userpointhId")
  userId Int @map("userId")
  orderId Int @map("orderId")
  history String @map("history") 
  amount Int @map("amount")
  afteramount Int @map("afteramount")
  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  order Orders @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
}

model Storespointh{
  storepointhId Int  @id @default(autoincrement()) @map("storepointhId")
  storeId Int @map("storeId")
  orderId Int @map("orderId")
  history String @map("history")
  amount Int @map("amount")
  afteramount Int @map("afteramount")
  store Stores @relation(fields: [storeId], references: [storeId] , onDelete: Cascade)
  order Orders @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
}